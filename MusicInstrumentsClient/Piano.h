#pragma once
#include "PianoKey.h"

#include <QWidget>
#include <QLabel>
#include <QPixmap>
#include <QVector>
#include <QRect>
#include <QPaintEvent>
#include <QPoint>
#include <QMouseEvent>
#include <QKeyEvent>

#include "Windows.h"
#include "mmeapi.h"

class Piano : public QWidget
{
	Q_OBJECT
public:
	Piano(QWidget* parent = nullptr, int keyFirst = 48);
	~Piano();

public slots:
	void changeInstrument(int index);

protected:
	void paintEvent(QPaintEvent* event) override;

	void mousePressEvent(QMouseEvent* event) override;

	void mouseReleaseEvent(QMouseEvent* event) override;

	void keyPressEvent(QKeyEvent* event) override;

	void keyReleaseEvent(QKeyEvent* event) override;

private:

	// Static configuration fields and methods
	static const int WhiteWidth = 46;
	static const int WhiteHeight = 290;
	static const int BlackWidth = 30;
	static const int BlackHeight = 170;
	static const int KeysCount = 128;

	static const int NoKey = 0xFF;

	static bool isBlack(int n);

	// General purpose methods
	void calcKeyRects();

	int pointToKey(const QPoint& point) const;

	// Audio handling methods
	void noteOn(int note, int channel);

	void noteOff(int note, int channel);

	// General purpose fields
	QLabel mPixmapLabel;
	QPixmap mPianoPixmap;
	QVector<PianoKey> mPianoKeys{ KeysCount };
	bool mIsConnected = false;
	bool mIsMuted = false;

	int mKeyFirst;
	int mKeyMouse = -1;

	// Music fields
	HMIDIOUT hMidiOut;
	quint8 mNoteVelocity = 0x7F; // (0 - 127)
	quint8 mMidiChannel = 0; // 0 - 9
	
	const quint8 KeyToNote[256] = {
	//   0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F	
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // 0
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // 1
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // 2
		0x3F, 0xFF, 0x31, 0x33, 0xFF, 0x36, 0x38, 0x3A, 0xFF, 0x3D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // 3
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x34, 0xFF, 0xFF, 0xFF, 0x3C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E,  // 4
		0x40, 0x30, 0x35, 0xFF, 0x37, 0x3B, 0xFF, 0x32, 0xFF, 0x39, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // 5
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // 6
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // 7
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // 8
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // 9
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // A
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // B
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // C
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // D
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // E
		0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // F 
	};
};

